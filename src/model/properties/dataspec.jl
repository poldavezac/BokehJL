abstract type iSpec{T} <: iProperty end
abstract type iUnitSpec{T, K} <: iSpec{T} end

macro dataspec(code::Expr)
    cls       = code.args[2].args[1]
    isunits   = code.args[2].args[2].args[1] ‚â° :iUnitSpec

    valuetype = let opts = filter(code.args[end].args) do i
            i isa Expr && i.head ‚â° :(::) && i.args[1] ‚â° :value
        end
        if (length(opts) > 1)
            throw(ErrorException("Could not create dataspec"))
        elseif length(opts) ‚â° 1
            opts[1].args[2]
        else
            valuetype = bokehfieldtype(__module__.eval(code.args[2].args[2].args[2]))
        end
    end

    construction = :(let out = new(
            get(kwa, :value, missing), get(kwa, :field, missing),
            get(kwa, :expr, missing),  get(kwa, :transform, missing),
            $((isunits ? (:units,) : ())...)
        )
        @assert(
            xor(ismissing(out.value), ismissing(out.field)),
            "One of value or field must be provided"
        )
        out
    end)

    constructor = if isunits
        :($cls(; units = Bokeh.Model.units($cls)[1], kwa...) = $construction)
    else
        :($cls(; kwa...) = $construction)
    end
    (cls isa Symbol) || (constructor.args[1] = :($(constructor.args[1]) where {$(cls.args[2:end]...)}))

    esc(quote
        struct $(code.args[2])
            value     :: Union{$valuetype, Missing}
            field     :: Union{String, Missing}
            expr      :: Union{iModel, Missing}
            transform :: Union{iModel, Missing}
            $((isunits ? (:(units :: $(code.args[2].args[2].args[end])),) : ())...)
            $constructor
        end
    end)
end

@dataspec struct Spec{T} <: iSpec{T}
    value::T
end

@dataspec struct UnitSpec{T, K} <: iUnitSpec{T, K}
    value::T
end

@dataspec struct DistanceSpec <: iUnitSpec{Distance, SpatialUnits}
    value::Float64
end

speceltype(::Type{<:iSpec{T}})          where {T}    = T
specunittype(::Type{<:iUnitSpec{T, K}}) where {T, K} = K
units(::Type{<:iUnitSpec{T, K}})        where {T, K} = values(K)

function _üëªspecvalue(ùëá::Type, Œ±, ŒΩ)
    value = get(ŒΩ, Œ±, missing)
    return ismissing(value) ? missing : bokehconvert(ùëá, value)
end

function bokehconvert(ùëá::Type{<:iSpec}, ŒΩ::Union{AbstractDict{Symbol}, NamedTuple})
    (keys(ŒΩ) ‚äà fieldnames(ùëá)) && return Unknown()
    value = _üëªspecvalue(speceltype(ùëá), :value, ŒΩ)
    (value isa Unknown) && return Unknown
    ùëá(; (i => get(ŒΩ, i, missing) for i ‚àà (:field, :expr, :transform))..., value)
end

function bokehconvert(ùëá::Type{<:iUnitSpec}, ŒΩ::Union{AbstractDict{Symbol}, NamedTuple})
    (keys(ŒΩ) ‚äà fieldnames(ùëá)) && return Unknown()
    value = _üëªspecvalue(speceltype(ùëá), :value, ŒΩ)
    (value isa Unknown) && return Unknown

    unt = _üëªspecvalue(specunittype(ùëá), :units, ŒΩ)
    (unt isa Unknown) && return Unknown
    ùëá(; (i => get(ŒΩ, i, missing) for i ‚àà (:field, :expr, :transform))..., value, unt)
end

function bokehconvert(ùëá::Type{<:iSpec}, ŒΩ::AbstractDict{<:AbstractString})
    bokehconvert(ùëá, Dict{Symbol, Any}((Symbol(i) => j for (i, j) ‚àà ŒΩ)))
end

function bokehconvert(ùëá::Type{<:iSpec}, ŒΩ)
    value = bokehconvert(speceltype(ùëá), ŒΩ)
    return value isa Unknown ? value : ùëá(; value)
end

bokehconvert(ùëá::Type{<:iSpec}, ŒΩ::AbstractString) = ùëá(; field = string(ŒΩ))

function bokehconvert(ùëá::Type{<:Spec{<:EnumType}}, ŒΩ::AbstractString)
    value = bokehconvert(speceltype(ùëá), ŒΩ)
    return value isa Unknown ? ùëá(; field = string(ŒΩ)) : ùëá(; value)
end

function Base.getproperty(Œº::iSpec{<:EnumType}, œÉ::Symbol)
    val = getfield(Œº, œÉ)
    return ismissing(val) || œÉ ‚â¢ :value ? val : val.value
end

function Base.getproperty(Œº::iUnitSpec, œÉ::Symbol)
    val = getfield(Œº, œÉ)
    return ismissing(val) || œÉ ‚â¢ :units ? val : val.value
end

function bokehread(::Type{T}, ::iHasProps, ::Symbol, ŒΩ::T) where {T <: iSpec}
    return (; (i=>getproperty(ŒΩ, i) for i ‚àà fieldnames(T) if !ismissing(getfield(ŒΩ, i)))...)
end

function bokehread(::Type{T}, ::iHasProps, ::Symbol, ŒΩ::T) where {T <: iUnitSpec}
    fields = fieldnames(ŒΩ.units ‚â° units(T)[1] ? Spec : UnitSpec)
    return (; (i=>getproperty(ŒΩ, i) for i ‚àà fields if !ismissing(getfield(ŒΩ, i)))...)
end

for cls ‚àà (:FontSize, :Size, :Alpha)
    @eval @dataspec struct $(Symbol("$(cls)Spec")) <: iSpec{$cls} end
end

for ùëá ‚àà (:LineCap, :LineDash, :LineJoin, :MarkerType, :TextAlign, :TextBaseline, :HatchPatternType, :FontStyle)
    @eval const $(Symbol(replace("$ùëá", "Type"=>"")*"Spec")) = Spec{$ùëá}
    @eval Base.show(io::IO, ::Type{Spec{$ùëá}}) = print(io::IO, $("Bokeh.Model.$(replace("$ùëá", "Type"=>""))Spec"))
end

const NumberSpec       = Spec{Float64}
const AngleSpec        = UnitSpec{Float64, AngleUnits}
const NullDistanceSpec = Nullable{DistanceSpec}
const NullStringSpec   = Nullable{Spec{String}}
const ColorSpec        = Spec{Color}

for ùëá ‚àà (:NumberSpec, :AngleSpec, :NullDistanceSpec, :NullStringSpec, :ColorSpec)
    @eval Base.show(io::IO, ::Type{$ùëá}) = print(io::IO, $("Bokeh.Model.$ùëá"))
end

@dataspec struct DashPatternSpec <: iSpec{DashPattern}
    value::Vector{Int64}
end

struct PropertyUnitsSpec <: iSpec{Float64}
    value     :: Union{Float64, Missing}
    field     :: Union{String, Missing}
    expr      :: Union{iModel, Missing}
    transform :: Union{iModel, Missing}
    units     :: Union{Symbol, Missing}

    PropertyUnitsSpec(;
            value = missing, field = missing, expr = missing, transform = missing, units = :data
    ) = new(
        (ismissing(value)   || isnothing(value)) ? missing : convert(Float64, value),
        (ismissing(field)   || isnothing(field)) ? missing : "$field",
        isnothing(expr)                          ? missing : expr,
        isnothing(transform)                     ? missing : transform,
        (ismissing(units)   || isnothing(units)) ? missing : Symbol(units)
    )
end

function bokehconvert(::Type{ColorSpec}, ŒΩ::Union{AbstractDict{Symbol}, NamedTuple})
    (keys(ŒΩ) ‚äà fieldnames(ColorSpec)) && return Unknown()
    value = get(ŒΩ, :value, missing)
    if !ismissing(value)
        value = color(value)
        ismissing(value) && return Unknown()
    end

    ColorSpec(; (i => j for (i, j) ‚àà zip(keys(ŒΩ), values(ŒΩ)))..., value)
end

function bokehconvert(::Type{ColorSpec}, ŒΩ::AbstractString)
    value = color(ŒΩ)
    return ismissing(value) ? ColorSpec(; field = string(ŒΩ)) : ColorSpec(; value)
end

function bokehconvert(::Type{ColorSpec}, ŒΩ::COLOR_ARGS)
    value = color(ŒΩ)
    ismissing(value) ? Unknown() : ColorSpec(; value)
end
