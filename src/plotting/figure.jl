module Figures
using ...Model
using ...Models: Plot, iAxis, iGrid, iPlot, iLegend, iHoverTool
using ...Models

struct PropertyVector{T}
    values::Vector{T}
end

function Base.propertynames(Œº::PropertyVector; private :: Bool = false)
    vals = getfield(Œº, values)
    return if isempty(vals)
        private ? (:values,) : ()
    elseif private
        (:values, propertynames(vals[1])...)
    else
        propertynames(vals[1])
    end
end

function Base.getproperty(Œº::PropertyVector, œÉ::Symbol)
    vals = getfield(Œº, :values)
    return œÉ ‚â° :values ? vals : PropertyVector([getproperty(i, œÉ) for i ‚àà vals])
end

function Base.setproperty!(Œº::PropertyVector, œÉ::Symbol, value; dotrigger :: Bool = true)
    vals = getfield(Œº, :values)
    (œÉ ‚â° :values) && return vals
    for i ‚àà vals
        setproperty!(i, œÉ, value; dotrigger)
    end
end

Base.eltype(Œº::PropertyVector{T}) where {T} = T
Base.length(Œº::PropertyVector) = length(Œº.values)
Base.iterate(Œº::PropertyVector, state = 1) = iterate(Œº.values, state)

for ùêπ ‚àà (:length, :iterate, :size, :eachindex, :lastindex, :firstindex, :get, :haskey, :keys, :values)
    @eval Base.$ùêπ(Œ≥::PropertyVector, x...) = $ùêπ(Œ≥.values, x...)
end
Base.isempty(Œ≥::PropertyVector)     = isempty(Œ≥.values)
Base.getindex(Œ≥::PropertyVector, x) = Œ≥.values[x]
Base.getindex(Œ≥::PropertyVector)    = Œ≥.values[]

for ùêπ ‚àà (:in, :any, :all, :filter)
    @eval Base.$ùêπ(ŒΩ, Œ≥::PropertyVector) = $ùêπ(ŒΩ, Œ≥.values)
end

function Base.getproperty(Œº::Plot, œÉ::Symbol)
    return if œÉ ‚â° :xaxis
        PropertyVector(iAxis[(i for i ‚àà Œº.below if i isa iAxis)..., (i for i ‚àà Œº.above if i isa iAxis)...])
    elseif œÉ ‚â° :yaxis
        PropertyVector(iAxis[(i for i ‚àà Œº.left if i isa iAxis)..., (i for i ‚àà Œº.right if i isa iAxis)...])
    elseif œÉ ‚â° :axis
        PropertyVector(collect(iAxis, Model.bokehchildren(iAxis, Œº)))
    elseif œÉ ‚â° :xgrid
        axes = Œº.xaxis
        PropertyVector(iGrid[i for i ‚àà Œº.center if i isa iGrid && i.axis ‚àà axes])
    elseif œÉ ‚â° :ygrid
        axes = Œº.yaxis
        PropertyVector(iGrid[i for i ‚àà Œº.center if i isa iGrid && i.axis ‚àà axes])
    elseif œÉ ‚â° :grid
        PropertyVector(collect(iGrid, Model.bokehchildren(iGrid, Œº)))
    elseif œÉ ‚â° :legend
        PropertyVector(collect(iLegend, Model.bokehchildren(iLegend, Œº)))
    elseif œÉ ‚â° :hover
        PropertyVector([i for i ‚àà Œº.toolbar.tools if i isa iHoverTool])
    else
        invoke(getproperty, Tuple{iPlot, Symbol}, Œº, œÉ)
    end
end

function Base.propertynames(Œº::Plot; private :: Bool = false)
    return (invoke(propertynames, Tuple{iPlot}, Œº; private)..., :xaxis, :yaxis, :xgrid, :ygrid)
end
end

using .Figures

"""
    figure(;
        # tool keywords
        active_drag    :: Union{Nothing, iDrag, String, Model.EnumType{(:auto,)}}                              = :auto
        active_inspect :: Union{Nothing, iInspectTool, String, Model.EnumType{(:auto,)}, Vector{iInspectTool}} = :auto
        active_multi   :: Union{Nothing, iGestureTool, String, Model.EnumType{(:auto,)}}                       = :auto
        active_scroll  :: Union{Nothing, iScroll, String, Model.EnumType{(:auto,)}}                            = :auto
        active_tap     :: Union{Nothing, iTap, String, Model.EnumType{(:auto,)}}                               = :auto
        tools          :: Union{String, Vector{Union{iTool, String}}}                                          = "pan,wheel_zoom,box_zoom,save,reset,help"
        tooltips       :: Union{Nothing, iTemplate, String, Vector{Tuple{String, String}}}                     = nothing

        # x-axis keywords
        x_axis_label    :: Union{Nothing, iBaseText, String}                                            = ""
        x_axis_location :: Union{Nothing, Model.EnumType{(:above, :below)}}                             = :below
        x_axis_type     :: Union{Nothing, Model.EnumType{(:auto, :linear, :log, :datetime, :mercator)}} = :auto
        x_minor_ticks   :: Union{Int64, Model.EnumType{(:auto,)}}                                       = :auto
        x_range         :: Any                                                                          = nothing

        # y-axis keywords
        y_axis_label    :: Union{Nothing, iBaseText, String}                                            = ""
        y_axis_location :: Union{Nothing, Model.EnumType{(:left, :right)}}                              = :left
        y_axis_type     :: Union{Nothing, Model.EnumType{(:auto, :linear, :log, :datetime, :mercator)}} = :auto
        y_minor_ticks   :: Union{Int64, Model.EnumType{(:auto,)}}                                       = :auto
        y_range         :: Any                                                                          = nothing
    )

Create a `Plot` object.
"""
function figure(; k...)
    opts = Models.FigureOptions(; (i for i ‚àà k if hasfield(Models.FigureOptions, first(i)))...)
    plot = Models.Plot(; (i for i ‚àà k if hasfield(Models.Plot, first(i)) && !hasfield(Models.FigureOptions, first(i)))...)
    addaxis!(plot, opts, :x; dotrigger = false) # no need to trigger when creating a brand new plot!
    addaxis!(plot, opts, :y; dotrigger = false)
    tools!(plot, opts; dotrigger = false)
    return plot
end

export figure
