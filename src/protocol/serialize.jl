module Serialize
using Dates
using ..AbstractTypes
using ...Model
using ...Events
using ..Protocol: Buffers

abstract type iRules end

"Specifies module specific rules for json serialization"
struct Rules <: iRules end

"Specifies module specific rules for json serialization with buffers"
struct BufferedRules <: iRules
    buffers :: Buffers
    BufferedRules() = new(Buffers(undef, 0)) 
end

serialtype(Œ∑::T, ::iRules) where {T <: iHasProps} = (; type = nameof(T))
serialtype(::Type{T}, ::iRules) where {T <: iHasProps} = (; type = nameof(T))

function serialattributes(Œ∑::T, ùëÖ::iRules) where {T <: iHasProps}
    return (;(
        i => serialref(j, Model.bokehrawtype(getproperty(Œ∑, i)), ùëÖ)
        for (i, j) ‚àà Model.bokehfields(T)
        if !Model.isdefaultvalue(Œ∑, i)
    )...)
end

function serialroot(Œ∑::iHasProps, ùëÖ::iRules)
    return (;
        attributes = serialattributes(Œ∑, ùëÖ),
        serialref(Œ∑, ùëÖ)...,
        serialtype(Œ∑, ùëÖ)...
    )
end
serialroot(Œ∑::Events.iEvent, ùëÖ::iRules) = serialref(Œ∑, ùëÖ)
serialref(::Type, Œ∑, ùëÖ::iRules)         = serialref(Œ∑, ùëÖ)
serialref(Œ∑::iHasProps, ::iRules)       = (; id = "$(bokehid(Œ∑))")

for cls ‚àà (:RootAddedEvent, :RootRemovedEvent)
    @eval function serialref(Œ∑::$cls, ùëÖ::iRules)
        return (;
            kind  = $(Meta.quot(Symbol(string(cls)[1:end-5]))),
            model = serialref(Œ∑.root, ùëÖ)
        )
    end
end

function serialref(Œ∑::Events.ModelChangedEvent, ùëÖ::iRules)
    return (;
        attr  = Œ∑.attr,
        hint  = nothing,
        kind  = :ModelChanged,
        model = serialref(Œ∑.model, ùëÖ),
        new   = serialref(Œ∑.new, ùëÖ),
    )
end

# warning : we're going to javascript, thus the ranges start at 0...
serialref(x::OrdinalRange, ::iRules) = (; start = first(x)-1, step = 1,       stop = last(x))
serialref(x::StepRangeLen, ::iRules) = (; start = first(x)-1, step = step(x), stop = last(x))

function serialref(Œ∑::Events.ColumnsPatchedEvent, ùëÖ::iRules)
    return (;
        column_source = serialref(Œ∑.model, ùëÖ),
        kind          = :ColumnsPatched,
        patches       = Dict{String, Vector}(
            k => [(serialref(i, ùëÖ), j) for (i, j) ‚àà v]
            for (k, v) ‚àà Œ∑.patches
        )
    )
end

function serialref(Œ∑::Events.ColumnsStreamedEvent, ùëÖ::iRules)
    return (;
        column_source = serialref(Œ∑.model, ùëÖ),
        data          = serialref(Œ∑.data, ùëÖ),
        kind          = :ColumnsStreamed,
        rollover      = serialref(Œ∑.rollover, ùëÖ)
    )
end

function serialref(Œ∑::Events.ColumnDataChangedEvent, ùëÖ::iRules)
    return (;
        cols          = serialref(collect(keys(Œ∑.data)), ùëÖ),
        column_source = serialref(Œ∑.model, ùëÖ),
        kind          = :ColumnDataChanged,
        new           = serialref(Model.DataSource, Œ∑.data, ùëÖ)
    )
end

const _ùëëùë†_ID  = bokehidmaker()
const _ùëëùë†_BIN = Union{(
    AbstractVector{i}
    for i ‚àà (UInt8, Int8, UInt16, Int16, UInt32, Int32, Float32, Float64)
)...}

for (R, code) ‚àà (
        iRules          => :(__ndarray__ = String(base64encode(arr))),
        BufferedRules   => :(__buffer__  = let id = "$(_ùëëùë†_ID())"
            push!(ùëÖ.buffers, id => reinterpret(Int8, ùëë))
            id
        end)
)
    @eval function _ùëëùë†_to(ùëë::_ùëëùë†_BIN, ùëÖ::$R)
        return (;
            $(Expr(:kw, code.args...)),
            dtype = lowercase("$(nameof(eltype(ùëë)))"),
            order = Base.ENDIAN_BOM ‚â° 0x04030201 ? :little : :big,
            shape = size(array),
        )
    end
end

for (T, code) ‚àà (
        TimePeriod => :(Dates.toms.(ùëë)),
        DateTime   => :(Int64.(round.(1e3 .* Dates.datetime2unix.(ùëë)))),
        Date       => :(Dates.toms.(Day.(Dates.date2epochdays.(ùëë))))
)
    @eval _ùëëùë†_to(ùëë::AbstractVector{$T}, ùëÖ::iRules) = _ùëëùë†_to($code, ùëÖ)
end

function serialref(::Type{Model.DataSource}, ùëë::Dict{String, AbstractVector}, ùëÖ::iRules)
    return Dict{String, Union{Vector, NamedTuple}}(k => _ùëëùë†_to(v) for (k, v) ‚àà ùëë)
end

serialref(Œ∑::TitleChangedEvent, ùëÖ::iRules) = (; kind = :TitleChanged, title = Œ∑.title)
serialref(Œ∑::Union{Date, DateTime, Model.Color}, ::iRules)    = "$Œ∑"
serialref(Œ∑::Union{AbstractString, Number, Symbol}, ::iRules) = Œ∑
serialref(Œ∑::Union{AbstractVector, AbstractSet}, ùëÖ::iRules)   = [serialref(i, ùëÖ) for i ‚àà Œ∑]
serialref(Œ∑::AbstractDict, ùëÖ::iRules) = Dict((serialref(i, ùëÖ) => serialref(j, ùëÖ) for (i,j) ‚àà Œ∑)...)
serialref(Œ∑::NamedTuple, ùëÖ::iRules) = (; (i => serialref(j, ùëÖ) for (i,j) ‚àà Œ∑)...)
function serialref(Œ∑::T, ùëÖ::iRules) where {T}
    return (; (
        i => serialref(Bokeh.bokehrawtype(getproperty(Œ∑, i)), ùëÖ)
        for i ‚àà propertynames(Œ∑)
    )...)
end


const SERIAL_ROOTS = Union{Events.iEvent, iHasProps}
serialize(Œ∑::AbstractVector{<:SERIAL_ROOTS}, ùëÖ :: iRules) = [serialroot(i, ùëÖ) for i ‚àà Œ∑]
serialize(Œ∑::SERIAL_ROOTS,                   ùëÖ :: iRules) = serialroot(Œ∑, ùëÖ)

serialize(x, buffers::Buffers) = serialize(x, BufferedRules(buffers))
serialize(x, ::Nothing)        = serialize(x)
serialize(x)                   = serialize(x, Rules())

export serialize
end
using .Serialize
